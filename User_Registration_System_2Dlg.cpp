// User_Registration_System_2Dlg.cpp : implementation file
#include "pch.h" // autogenerated
#include "framework.h"// auto
#include "User_Registration_System_2.h"// auto
#include "User_Registration_System_2Dlg.h"//auto
#include "afxdialogex.h" // used for 
#include "CCreateAccountDlg.h"//
#include "CCLeadLockingDlg.h"//
#include <afxwin.h>// for data binding using ddx and pdx 
#include <regex> // for email validation
#include <cppconn/resultset.h> // for using prepared statement pointer
#include "UserRoles.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);// DDX/DDV support
	
public:
	DECLARE_MESSAGE_MAP()
	afx_msg void OnBnClickedOk();
	
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);

}

// CWnd* pParent /*=nullptr*/: The constructor takes an optional parameter pParent of type CWnd*. 
// This parameter specifies the parent window of the dialog. If no parent window is provided, it defaults to nullptr.
CUserRegistrationSystem2Dlg::CUserRegistrationSystem2Dlg(CWnd* pParent )
	: CDialogEx(IDD_USER_REGISTRATION_SYSTEM_2_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CUserRegistrationSystem2Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);// This is a function used for exchanging data, pDX is a pointer for reference
	DDX_Text(pDX, IDC_EDIT_USERNAME, Username); // this is used to bind the username and password with the edit cotrol id of username, password type
	DDX_Text(pDX, IDC_EDIT_PASSWORD, Password);// DDX_TEXT here is macro defined by MFC // Always DDX_Text is defined in lower case = pDX 
	// use afxwin header file to include macros
}

BEGIN_MESSAGE_MAP(CUserRegistrationSystem2Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_EN_CHANGE(IDC_EDIT_USERNAME, &CUserRegistrationSystem2Dlg::OnEnChangeEditUsername)
	ON_BN_CLICKED(IDC_Cancel, &CUserRegistrationSystem2Dlg::OnBnClickedCancel)
	ON_EN_CHANGE(IDC_EDIT_PASSWORD, &CUserRegistrationSystem2Dlg::OnEnChangeEditPassword)
	ON_BN_CLICKED(IDC_Create_Account, &CUserRegistrationSystem2Dlg::OnBnClickedCreateAccount)
	ON_BN_CLICKED(IDC_SUBMIT, &CUserRegistrationSystem2Dlg::OnBnClickedSubmit)
END_MESSAGE_MAP()


BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
	ON_BN_CLICKED(IDOK, &CAboutDlg::OnBnClickedOk)
END_MESSAGE_MAP()


// call to the  abse class's oninitdialog() 
BOOL CUserRegistrationSystem2Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != nullptr)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	SetIcon(m_hIcon, TRUE);			
	SetIcon(m_hIcon, FALSE);		
	return TRUE; 
}
// Handles system commands - like those from the system menu
void CUserRegistrationSystem2Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}


// Manages painting the dialog 
void CUserRegistrationSystem2Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}
// Provides the appropriate cursor for dragging the minimized window.
HCURSOR CUserRegistrationSystem2Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CUserRegistrationSystem2Dlg::OnEnChangeEditUsername()
{
	// TODO:  Add your control notification handler code here
	UpdateData(TRUE);
	GetDlgItem(IDC_SUBMIT)->EnableWindow(!Username.IsEmpty() && IsValidEmail_username(Username));

}


void CUserRegistrationSystem2Dlg::OnBnClickedCancel()
{
	// TODO: Add your control notification handler code here
	EndDialog(IDC_Cancel);
}


void CUserRegistrationSystem2Dlg::OnEnChangeEditPassword()
{
	UpdateData(TRUE);
	GetDlgItem(IDC_SUBMIT)->EnableWindow(!Password.IsEmpty() && IsAlphanumeric(Password) && IsValidEmail_username(Username));
}

void CUserRegistrationSystem2Dlg::OnBnClickedCreateAccount()
{
	CCreateAccountDlg createAccountDlg;
     createAccountDlg.DoModal();
	
}
void CUserRegistrationSystem2Dlg::OnBnClickedSubmit()
{
	UpdateData(TRUE);

	if (Username.IsEmpty() || Password.IsEmpty()) {
		AfxMessageBox(_T("Please enter both username and password."));
		return;
	}
	
	UserRole userRole = DoesUserExist();

	if (userRole != USER_NOT_FOUND ) {
		AfxMessageBox(_T("Login Successful!"));
		CCLeadLockingDlg leadLockingDlg;
		leadLockingDlg.SetUserRole(userRole); // Pass the user role to the dialog
		leadLockingDlg.DoModal();
	}
	else {
		AfxMessageBox(_T("User does not exist. Please create an account."));

	}
}

bool CUserRegistrationSystem2Dlg::ConnectToDatabase() {
	
	try {
		sql::mysql::MySQL_Driver* driver = sql::mysql::get_mysql_driver_instance();
		con = std::unique_ptr<sql::Connection>(driver->connect("tcp://127.0.0.1:3306", "root", "Missspacegirl@09"));
		con->setSchema("user_register");
		return true;
	}
	catch (sql::SQLException& e) {
		CString errorMessage;
		errorMessage.Format(_T("Database connection failed: %S"), e.what());
		AfxMessageBox(errorMessage);
		return false;
	}
}


UserRole CUserRegistrationSystem2Dlg::DoesUserExist()
{
	
		if (!ConnectToDatabase())
			return USER_NOT_FOUND ;

		try {
			std::unique_ptr<sql::PreparedStatement> pstmt;
			std::unique_ptr<sql::ResultSet> res;
			pstmt.reset(con->prepareStatement("SELECT * FROM users WHERE username = ? AND password = ?"));
			CStringA usernameA(Username);
			CStringA passwordA(Password);
			pstmt->setString(1, std::string(usernameA));
			pstmt->setString(2, std::string(passwordA));
			res.reset(pstmt->executeQuery());
			if (res->next()) {
				bool isAdmin = res->getBoolean("is_admin");
				return isAdmin ? USER_ADMIN : USER_NORMAL;
			}
			else {
				return USER_NOT_FOUND;
			}
		}
		catch (sql::SQLException& e) {
			CString errorMessage;
			errorMessage.Format(_T("Query execution failed: %S"), e.what());
			AfxMessageBox(errorMessage);
			return USER_NOT_FOUND;
		}
	}

bool  CUserRegistrationSystem2Dlg::IsAlphanumeric(const CString& str)
{
	for (int i = 0; i < str.GetLength(); ++i)
	{
		if (!isalnum(str[i]))
		{
			return false;
		}
	}
	return true;
}
bool CUserRegistrationSystem2Dlg::IsValidEmail_username (const CString& str)
{
	const std::regex pattern(
		// \w is a character class means word character , + & etc are quantifiers-> + means 1 or more
		// * means 1 or more, . means anything except new line 
		R"((\w+)(\.{1}\w+)*@(\w+)(\.(\w+))+)"//
	);
	std::string emailStr = CT2CA(str);// Unicode to ANSI conversion of string
	return std::regex_match(emailStr, pattern);
}

void CAboutDlg::OnBnClickedOk()
{
	CDialogEx::OnOK();
}
